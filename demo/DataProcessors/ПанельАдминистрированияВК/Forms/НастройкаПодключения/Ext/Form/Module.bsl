///////////////////////////////////////////////////////////////////////////////////////////////////////
// (с) Tolkachev Pavel, 2020-2021
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьПараметрыПодключения();
	ПолучитьПараметрыДоступа();
	УстановитьСтатусАвторизации();
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИдентификаторПриложенияПриИзменении(Элемент)
	
	ЗаписатьПараметрыПодключения();
	УстановитьСтатусАвторизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступаПриИзменении(Элемент)
	
	ЗаписатьПараметрыПодключения();
	УстановитьСтатусАвторизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("СтрокаДоступа", ПраваДоступа);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборПравДоступаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ПанельАдминистрированияВК.Форма.ВыборПравДоступа",
		ПараметрыФормы, ЭтаФорма, , , , ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПравДоступаЗавершение(Значение, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Значение) = Тип("Строка") Тогда
		ПраваДоступа = Значение;
		ПраваДоступаПриИзменении(Элементы.ПраваДоступа);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ПолучитьКлючДоступа(Команда)
	
	// Процедура "ПроверитьЗаполнение()" не вызывается, чтобы не выполнять лишних серверных вызовов.
	Если Не ПроверитьЗаполнениеПараметровПодключения() Тогда
		Возврат;
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьКлючДоступаЗавершение", ЭтотОбъект);
	vk_ИнтеграцияВККлиент.АвторизацияВКонтакте(ИдентификаторПриложения, ПраваДоступа, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКлючДоступаЗавершение(ПараметрыДоступа, ДополнительныеПараметры) Экспорт
	
	Если ПараметрыДоступа = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СрокДействияКлюча = ПараметрыДоступа.СрокДействияКлюча;
	ЗаписатьПараметрыДоступа(ПараметрыДоступа.ИдентификаторПользователя, ПараметрыДоступа.КлючДоступа);
	
	УстановитьСтатусАвторизации(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьАккаунт(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОтключитьАккаунтЗавершение", ЭтотОбъект);
	vk_ИнтеграцияВККлиент.ОтключитьАккаунтВКонтакте(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьАккаунтЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		УдалитьПараметрыДоступа();
		УстановитьСтатусАвторизации(Истина);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатусАвторизации.Имя);
	
	Отбор = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючДоступаУстановлен");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеобходимаАвторизация);
	
	//
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтатусАвторизации.Имя);
	
	Отбор = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КлючДоступаУстановлен");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Истина;
	
	Отбор = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокДействияКлюча");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Отбор = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокДействияКлюча");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	Отбор.ПравоеЗначение = ТекущаяДатаСеанса();
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаКлючДоступаПросрочен);
	
КонецПроцедуры 

&НаСервере
Процедура УстановитьСтатусАвторизации(КлючДоступаОбновлен = Ложь)
	
	Если КлючДоступаОбновлен Тогда
		ПолучитьПараметрыДоступа();
	КонецЕсли; 
	
	Если Не КлючДоступаУстановлен Тогда
		СтатусАвторизации = НСтр("ru='Для выполнения обращений к API ВК необходимо получить ключ доступа.'");
		Элементы.ПолучитьКлючДоступа.Заголовок = НСтр("ru='Получить ключ доступа'");
		Элементы.ОтключитьАккаунт.Доступность = Ложь;
	Иначе
		Если Не ЗначениеЗаполнено(СрокДействияКлюча) Тогда
			СтатусАвторизации = НСтр("ru='Ключ доступа актуален и действует бессрочно.'") 
		Иначе
			СтатусАвторизации = ?(СрокДействияКлюча < ТекущаяДатаСеанса(),
				СтрШаблон(НСтр("ru='Срок действия ключа доступа истёк %1.'"), СрокДействияКлюча),
				СтрШаблон(НСтр("ru='Ключ доступа актуален до %1.'"), СрокДействияКлюча));
		КонецЕсли; 
		
		Элементы.ПолучитьКлючДоступа.Заголовок = НСтр("ru='Обновить ключ доступа'");
		Элементы.ОтключитьАккаунт.Доступность = Истина;
	КонецЕсли; 
	
КонецПроцедуры 

&НаКлиенте
Функция ПроверитьЗаполнениеПараметровПодключения()
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(ИдентификаторПриложения) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.ПутьКДанным = "ИдентификаторПриложения";
		Сообщение.Текст = НСтр("ru='Не указан ID приложения'");
		Сообщение.Сообщить();
		
		Отказ = Истина;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ПраваДоступа) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.ПутьКДанным = "ПраваДоступа";
		Сообщение.Текст = НСтр("ru='Не заданы права доступа'");
		Сообщение.Сообщить();
		
		Отказ = Истина;
	КонецЕсли; 
	
	Возврат Не Отказ;
	
КонецФункции 

&НаСервере
Процедура ПолучитьПараметрыПодключения()
	
	// Параметры доступа хранятся в регистре сведений "БезопасноеХранилищеДанных" библиотеки стандартных подсистем (БСП).
	// Вы можете использовать этот механизм, если добавляете интеграцию с ВК в типовую конфигурацию или реализовать свой
	// механизм сохранения настроек подключения к сайту ВКонтакте.
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыПодключения = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ИнтеграцияВК", "ПараметрыПодключения");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ПараметрыПодключения <> Неопределено Тогда
		ИдентификаторПриложения = ПараметрыПодключения.ИдентификаторПриложения;
		ПраваДоступа = ПараметрыПодключения.ПраваДоступа;
	Иначе
		ИдентификаторПриложения = Неопределено;
		ПраваДоступа = Неопределено;
	КонецЕсли; 
	
КонецПроцедуры 

&НаСервере
Процедура ПолучитьПараметрыДоступа()
	
	// Параметры доступа хранятся в регистре сведений "БезопасноеХранилищеДанных" библиотеки стандартных подсистем (БСП).
	// Вы можете использовать этот механизм, если добавляете интеграцию с ВК в типовую конфигурацию или реализовать свой
	// механизм сохранения настроек подключения к сайту ВКонтакте.
	
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыДоступа = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ИнтеграцияВК", "ПараметрыДоступа");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ПараметрыДоступа <> Неопределено Тогда
		СрокДействияКлюча = ?(ЗначениеЗаполнено(ПараметрыДоступа.СрокДействияКлюча),
			МестноеВремя(ПараметрыДоступа.СрокДействияКлюча),
			Неопределено);
		КлючДоступаУстановлен = ЗначениеЗаполнено(ПараметрыДоступа.КлючДоступа);
	Иначе
		СрокДействияКлюча = Неопределено;
		КлючДоступаУстановлен = Ложь;
	КонецЕсли; 
	
КонецПроцедуры 

&НаСервере
Процедура ЗаписатьПараметрыПодключения()
	
	// Параметры доступа хранятся в регистре сведений "БезопасноеХранилищеДанных" библиотеки стандартных подсистем (БСП).
	// Вы можете использовать этот механизм, если добавляете интеграцию с ВК в типовую конфигурацию или реализовать свой
	// механизм сохранения настроек подключения к сайту ВКонтакте.
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("ИдентификаторПриложения", ИдентификаторПриложения);
	ПараметрыПодключения.Вставить("ПраваДоступа", ПраваДоступа);
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("ИнтеграцияВК", ПараметрыПодключения, "ПараметрыПодключения");
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры 

&НаСервере
Процедура ЗаписатьПараметрыДоступа(ИдентификаторПользователя, КлючДоступа)
	
	// Параметры доступа хранятся в регистре сведений "БезопасноеХранилищеДанных" библиотеки стандартных подсистем (БСП).
	// Вы можете использовать этот механизм, если добавляете интеграцию с ВК в типовую конфигурацию или реализовать свой
	// механизм сохранения настроек подключения к сайту ВКонтакте.
	
	ПараметрыДоступа = Новый Структура;
	ПараметрыДоступа.Вставить("ИдентификаторПользователя", ИдентификаторПользователя);
	ПараметрыДоступа.Вставить("КлючДоступа", КлючДоступа);
	ПараметрыДоступа.Вставить("СрокДействияКлюча", СрокДействияКлюча);
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("ИнтеграцияВК", ПараметрыДоступа, "ПараметрыДоступа");
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры 

&НаСервере
Процедура УдалитьПараметрыДоступа()
	
	// Параметры доступа хранятся в регистре сведений "БезопасноеХранилищеДанных" библиотеки стандартных подсистем (БСП).
	// Вы можете использовать этот механизм, если добавляете интеграцию с ВК в типовую конфигурацию или реализовать свой
	// механизм сохранения настроек подключения к сайту ВКонтакте.
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.УдалитьДанныеИзБезопасногоХранилища("ИнтеграцияВК", "ПараметрыДоступа");
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры 

#КонецОбласти 