///////////////////////////////////////////////////////////////////////////////////////////////////////
// (с) Tolkachev Pavel, 2020-2021
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Параметры доступа хранятся в регистре сведений "БезопасноеХранилищеДанных" библиотеки стандартных подсистем (БСП).
	// Вы можете использовать этот механизм, если добавляете интеграцию с ВК в типовую конфигурацию или реализовать свой
	// механизм сохранения настроек подключения к сайту ВКонтакте.
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыПодключения = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ИнтеграцияВК", "ПараметрыПодключения");
	ПараметрыДоступа = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ИнтеграцияВК", "ПараметрыДоступа");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ПараметрыПодключения = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Не заданы параметры подключения ВКонтакте'");
	ИначеЕсли ПараметрыДоступа = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Не выполнена авторизация ВКонтакте'");
	КонецЕсли; 
	
	ВариантРазмещенияЗаписи = "Пользователь";
	
	УстановитьВидимостьФайла(ЭтаФорма);
	УстановитьДоступностьДатыПубликации(ЭтаФорма);
	УстановитьДоступностьРекламногоОбъявления(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Оповещение = Новый ОписаниеОповещения("ПроверкаДоступностиОбменаСВКЗавершение", ЭтотОбъект);
	vk_ИнтеграцияВККлиент.ПроверитьАвторизациюПользователя(
		Оповещение,
		ПараметрыПодключения.ИдентификаторПриложения,
		ПараметрыПодключения.ПраваДоступа,
		ПараметрыДоступа.СрокДействияКлюча);
		
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьДоступностьРекламногоОбъявления(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ВариантРазмещенияЗаписи <> "Сообщество" Тогда
		НайденныйЭлемент = ПроверяемыеРеквизиты.Найти("Сообщество");
		ПроверяемыеРеквизиты.Удалить(НайденныйЭлемент);		
	КонецЕсли; 
	
	Если Не ОпубликоватьВУказаннуюДату Тогда
		НайденныйЭлемент = ПроверяемыеРеквизиты.Найти("ДатаПубликации");
		ПроверяемыеРеквизиты.Удалить(НайденныйЭлемент);		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ВариантРазмещенияЗаписиПриИзменении(Элемент)
	
	Если ВариантРазмещенияЗаписи = "Сообщество" Тогда
		Элементы.Сообщество.Видимость = Истина;
	Иначе
		Элементы.Сообщество.Видимость = Ложь;
		РекламнаяЗапись = Ложь;
	КонецЕсли;
	
	УстановитьДоступностьРекламногоОбъявления(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОпубликоватьВУказаннуюДатуПриИзменении(Элемент)

	УстановитьДоступностьДатыПубликации(ЭтаФорма);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьФайл(Команда)
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Заголовок = НСтр("ru='Выберите файл с изображением'");
	ДиалогВыбора.ПредварительныйПросмотр = Истина;
	ДиалогВыбора.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбора.Фильтр = НСтр("ru='Изображения JPEG|*.jpeg;*.jpg|Все файлы (*.*)|*.*'");
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьФайлЗавершение", ЭтотОбъект);
	ДиалогВыбора.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ИмяФайла = ВыбранныеФайлы[0];
	УстановитьВидимостьФайла(ЭтаФорма);
	
КонецПроцедуры 

&НаКлиенте
Процедура РазместитьЗапись(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		Состояние(НСтр("ru='Размещение записи на стене...'"));
		НачатьРазмещениеЗаписи();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаПубликации.Имя);
	
	Отбор = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОпубликоватьВУказаннуюДату");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = Ложь;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьФайла(Форма)
	
	Форма.Элементы.ГруппаИмяФайла.ТекущаяСтраница =
		?(ЗначениеЗаполнено(Форма.ИмяФайла),
			Форма.Элементы.ГруппаФайлВыбран,
			Форма.Элементы.ГруппаФайлНеВыбран
		);
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьДатыПубликации(Форма)

	Форма.Элементы.ДатаПубликации.Доступность = Форма.ОпубликоватьВУказаннуюДату;		
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьРекламногоОбъявления(Форма)
	
	Форма.Элементы.РекламнаяЗапись.Доступность = (Форма.ВариантРазмещенияЗаписи = "Сообщество");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаДоступностиОбменаСВКЗавершение(РезультатПроверки, ДополнительныеПараметры) Экспорт
	
	Если РезультатПроверки.Результат = "КлючНедействителен" Тогда
		Закрыть();
		Возврат;
	ИначеЕсли РезультатПроверки.Результат = "КлючОбновлен" Тогда
		СохранитьНовыеПараметрыДоступа(РезультатПроверки.ПараметрыДоступа);
	КонецЕсли;
	
	ЗаполнитьСообществаПользователя();
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьСообществаПользователя()
	Перем ИнформацияОбОшибке;
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("user_id", ПараметрыДоступа.ИдентификаторПользователя);
	ПараметрыМетода.Вставить("extended", 1);
	
	Результат = vk_ИнтеграцияВККлиентСервер.ВызватьМетодAPI(
		"groups.get",
		ПараметрыМетода,
		ПараметрыДоступа.КлючДоступа,
		ИнформацияОбОшибке);
	
	Если Результат = Неопределено Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru='Произошла ошибка при получении списка сообществ пользователя ВКонтакте:
					 |%1'"),
			ИнформацияОбОшибке.Представление);
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли; 
	
	Для каждого СообществоВК Из Результат.items Цикл
		Элементы.Сообщество.СписокВыбора.Добавить(
			Формат(СообществоВК.id, "ЧГ="),
			СообществоВК.name);
	КонецЦикла;
		
	Если Элементы.Сообщество.СписокВыбора.Количество() > 0 Тогда
		Сообщество = Элементы.Сообщество.СписокВыбора[0].Значение;
	КонецЕсли; 	
	
КонецПроцедуры 

&НаСервере
Процедура СохранитьНовыеПараметрыДоступа(ПараметрыДоступа)
	
	// Параметры доступа хранятся в регистре сведений "БезопасноеХранилищеДанных" библиотеки стандартных подсистем (БСП).
	// Вы можете использовать этот механизм, если добавляете интеграцию с ВК в типовую конфигурацию или реализовать свой
	// механизм сохранения настроек подключения к сайту ВКонтакте.
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("ИнтеграцияВК", ПараметрыДоступа, "ПараметрыДоступа");
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры 

&НаКлиенте
Процедура НачатьРазмещениеЗаписи()
	
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		ЗагрузитьФотографиюНаСтену();
	Иначе
		РазметитьЗаписьНаСтене();
	КонецЕсли; 
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗагрузитьФотографиюНаСтену()
	Перем ИнформацияОбОшибке;
	
	Если ВариантРазмещенияЗаписи = "Пользователь" Тогда
		ИдентификаторПользователя = ПараметрыДоступа.ИдентификаторПользователя;
		ИдентификаторСообщества = Неопределено;
	Иначе
		ИдентификаторПользователя = Неопределено;
		ИдентификаторСообщества = Сообщество;
	КонецЕсли; 
	
	ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	
	ПараметрыИзображения = vk_ИнтеграцияВККлиентСервер.ЗагрузитьФотографиюНаСтену(
		ПараметрыДоступа.КлючДоступа,
		ИдентификаторПользователя,
		ИдентификаторСообщества,
		ДанныеФайла, , , ,
		ИнформацияОбОшибке);
	
	Если ИнформацияОбОшибке <> Неопределено И ИнформацияОбОшибке.ТребуетсяCaptcha Тогда
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьФотографиюНаСтенуПослеВводаCaptcha", ЭтотОбъект);
		vk_ИнтеграцияВККлиент.ВвестиCaptchaИПовторитьВызовМетодаAPI(ИнформацияОбОшибке.ПараметрыCaptcha, Оповещение);
	Иначе
		ОбработатьЗагрузкуФотографииНаСтену(ПараметрыИзображения, ИнформацияОбОшибке);
	КонецЕсли; 
	
КонецПроцедуры 
	
&НаКлиенте
Процедура ЗагрузитьФотографиюНаСтенуПослеВводаCaptcha(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не введена Captcha.'"));
	Иначе
		ОбработатьЗагрузкуФотографииНаСтену(Результат.Ответ, Результат.ИнформацияОбОшибке);
	КонецЕсли; 
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьЗагрузкуФотографииНаСтену(ПараметрыИзображения, ИнформацияОбОшибке = Неопределено)
	
	Если ИнформацияОбОшибке <> Неопределено Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru='Произошла ошибка при загрузке изображения на стену: %1'"),
			ИнформацияОбОшибке.Представление);
		Сообщить(ТекстСообщения);
	Иначе
		attachments = СтрШаблон("photo%1_%2",
			Формат(ПараметрыИзображения[0].owner_id, "ЧГ="),
			Формат(ПараметрыИзображения[0].id, "ЧГ="));
		РазметитьЗаписьНаСтене(attachments);
	КонецЕсли;
	
КонецПроцедуры 
	
&НаКлиенте
Процедура РазметитьЗаписьНаСтене(attachments = Неопределено)
	Перем ИнформацияОбОшибке;
	
	owner_id = ?(ВариантРазмещенияЗаписи = "Пользователь",
		Число(ПараметрыДоступа.ИдентификаторПользователя),
		-Число(Сообщество));
		
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("owner_id", owner_id);
	ПараметрыЗаписи.Вставить("friends_only", ?(ДоступноТолькоДрузьям, 1, 0));
	ПараметрыЗаписи.Вставить("message", Сообщение);
	ПараметрыЗаписи.Вставить("attachments", attachments);
	ПараметрыЗаписи.Вставить("close_comments", ?(ЗакрытьКомментарии, 1, 0));
	Если РекламнаяЗапись Тогда
		ПараметрыЗаписи.Вставить("mark_as_ads", 1);
		ПараметрыЗаписи.Вставить("from_group", 1);
	КонецЕсли;
	Если ОпубликоватьВУказаннуюДату Тогда
		ПараметрыЗаписи.Вставить("publish_date", vk_ИнтеграцияВККлиентСервер.ПреобразоватьДатуВUnixTime(ДатаПубликации));
	КонецЕсли;

	Результат = vk_ИнтеграцияВККлиентСервер.ВызватьМетодAPI(
		"wall.post",
		ПараметрыЗаписи,
		ПараметрыДоступа.КлючДоступа,
		ИнформацияОбОшибке);
	
	Если ИнформацияОбОшибке <> Неопределено И ИнформацияОбОшибке.ТребуетсяCaptcha Тогда
		Оповещение = Новый ОписаниеОповещения("РазметитьЗаписьНаСтенеПослеВводаCaptcha", ЭтотОбъект);
		vk_ИнтеграцияВККлиент.ВвестиCaptchaИПовторитьВызовМетодаAPI(ИнформацияОбОшибке.ПараметрыCaptcha, Оповещение);
	Иначе
		ОбработатьРазмещениеЗаписиНаСтене(Результат, ИнформацияОбОшибке);
	КонецЕсли; 
		
КонецПроцедуры 

&НаКлиенте
Процедура РазметитьЗаписьНаСтенеПослеВводаCaptcha(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не введена Captcha.'"));
	Иначе
		ОбработатьРазмещениеЗаписиНаСтене(Результат.Ответ, Результат.ИнформацияОбОшибке);
	КонецЕсли; 
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьРазмещениеЗаписиНаСтене(Результат, ИнформацияОбОшибке = Неопределено)
	
	Если ИнформацияОбОшибке <> Неопределено Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru='Произошла ошибка при публикации записи: %1'"),
			ИнформацияОбОшибке.Представление);
		Сообщить(ТекстСообщения);
	Иначе
		Сообщить(СтрШаблон(НСтр("ru='Запись успешно опубликована. ID записи = %1'"), Результат.post_id));
	КонецЕсли; 
	
КонецПроцедуры 

#КонецОбласти