///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright 2019 Pavel V. Tolkachev
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Параметры доступа хранятся в регистре сведений "БезопасноеХранилищеДанных" библиотеки стандартных подсистем (БСП).
	// Вы можете использовать этот механизм, если добавляете интеграцию с ВК в типовую конфигурацию или реализовать свой
	// механизм сохранения настроек подключения к сайту ВКонтакте.
	УстановитьПривилегированныйРежим(Истина);
	ПараметрыПодключения = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ИнтеграцияВК", "ПараметрыПодключения");
	ПараметрыДоступа = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища("ИнтеграцияВК", "ПараметрыДоступа");
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ПараметрыПодключения = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Не заданы параметры подключения ВКонтакте'");
	ИначеЕсли ПараметрыДоступа = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Не выполнена авторизация ВКонтакте'");
	КонецЕсли; 
	
	УстановитьДоступностьСтаройЦены(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Оповещение = Новый ОписаниеОповещения("ПроверкаДоступностиОбменаСВКЗавершение", ЭтотОбъект);
	vk_ИнтеграцияВККлиент.ПроверитьАвторизациюПользователя(
		Оповещение,
		ПараметрыПодключения.ИдентификаторПриложения,
		ПараметрыПодключения.ПраваДоступа,
		ПараметрыДоступа.СрокДействияКлюча);
		
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Очистить(); // Используем собственную проверку.
	
	Если Не ЗначениеЗаполнено(ИдентификаторВладельца) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле = "ИдентификаторВладельца";
		Сообщение.Текст = НСтр("ru='Не указано сообщество'");
		Сообщение.Сообщить();
		
		Отказ = Истина;
	ИначеЕсли ИдентификаторКатегории = 0 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле = "ИдентификаторКатегории";
		Сообщение.Текст = НСтр("ru='Не выбрана категория товаров.'");
		Сообщение.Сообщить();
		
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИзображениеТовара) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле = "Изображение";
		Сообщение.Текст = НСтр("ru='Не выбрано изображение товара.'");
		Сообщение.Сообщить();
		
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИзображениеТовараНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Заголовок = НСтр("ru='Выберите изображения товара для загрузки'");
	ДиалогВыбора.ПредварительныйПросмотр = Истина;
	ДиалогВыбора.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбора.Фильтр = НСтр("ru='Изображения JPEG|*.jpeg;*.jpg|Все файлы (*.*)|*.*'");

	Оповещение = Новый ОписаниеОповещения("ПомещениеИзображенияЗавершение", ЭтотОбъект);
	НачатьПомещениеФайла(Оповещение,, ДиалогВыбора,, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПомещениеИзображенияЗавершение(Результат, АдресФайла, ПомещаемыйФайл, ДополнительныеПараметры) Экспорт
	
	ИзображениеТовара = АдресФайла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСтаруюЦенуПриИзменении(Элемент)
	
	УстановитьДоступностьСтаройЦены(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДобавитьТовар(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		Состояние(НСтр("ru='Добавление товара...'"));
		НачатьДобавлениеТовара();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИдентификаторКатегории.Имя);
	
	Отбор = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИдентификаторКатегории");
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ПравоеЗначение = 0;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьСтаройЦены(Форма)
	
	Форма.Элементы.СтараяЦена.Доступность = Форма.ИспользоватьСтаруюЦену;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаДоступностиОбменаСВКЗавершение(РезультатПроверки, ДополнительныеПараметры) Экспорт
	
	Если РезультатПроверки.Результат = "КлючНедействителен" Тогда
		Закрыть();
		Возврат;
	ИначеЕсли РезультатПроверки.Результат = "КлючОбновлен" Тогда
		СохранитьНовыеПараметрыДоступа(РезультатПроверки.ПараметрыДоступа);
	КонецЕсли;
	
	ЗаполнитьСообществаПользователя();
	ЗаполнитьСписокКатегорий();
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьСообществаПользователя()
	Перем ИнформацияОбОшибке;
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("user_id", ПараметрыДоступа.ИдентификаторПользователя);
	ПараметрыМетода.Вставить("extended", 1);
	ПараметрыМетода.Вставить("filter", "moder");
	ПараметрыМетода.Вставить("fields", "market");
	
	Результат = vk_ИнтеграцияВККлиентСервер.ВызватьМетодAPI(
		"groups.get",
		ПараметрыМетода,
		ПараметрыДоступа.КлючДоступа,
		ИнформацияОбОшибке);
	
	Если Результат = Неопределено Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru='Произошла ошибка при получении списка сообществ пользователя ВКонтакте:
					 |%1'"),
			ИнформацияОбОшибке.Представление);
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли; 
	
	Для каждого СообществоВК Из Результат.items Цикл
		Если СообществоВК.market.enabled = 1 Тогда
			Элементы.ИдентификаторВладельца.СписокВыбора.Добавить(
				Формат(СообществоВК.id, "ЧГ="),
				СообществоВК.name);
		КонецЕсли; 	
	КонецЦикла;
		
	Если Элементы.ИдентификаторВладельца.СписокВыбора.Количество() > 0 Тогда
		ИдентификаторВладельца = Элементы.ИдентификаторВладельца.СписокВыбора[0].Значение;
	КонецЕсли; 	
	
КонецПроцедуры 

&НаКлиенте
Процедура ЗаполнитьСписокКатегорий()
	Перем ИнформацияОбОшибке;
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("count", 1000);
	
	СписокКатегорий = vk_ИнтеграцияВККлиентСервер.ВызватьМетодAPI("market.getCategories", ПараметрыМетода,
		ПараметрыДоступа.КлючДоступа, ИнформацияОбОшибке);
	
	Если СписокКатегорий = Неопределено Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru='Произошла ошибка при получении списка категорий товаров: %1'"),
			ИнформацияОбОшибке.Представление);
		Сообщить(ТекстСообщения);
		Возврат;
	КонецЕсли; 
	
	Для каждого Категория Из СписокКатегорий.items Цикл
		ПредставлениеКатегории = СтрШаблон("%1 / %2", Категория.section.name, Категория.name);
		Элементы.ИдентификаторКатегории.СписокВыбора.Добавить(Категория.id, ПредставлениеКатегории);
	КонецЦикла;
	
	Если Элементы.ИдентификаторКатегории.СписокВыбора.Количество() > 0 Тогда
		ИдентификаторКатегории = Элементы.ИдентификаторКатегории.СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНовыеПараметрыДоступа(ПараметрыДоступа)
	
	// Параметры доступа хранятся в регистре сведений "БезопасноеХранилищеДанных" библиотеки стандартных подсистем (БСП).
	// Вы можете использовать этот механизм, если добавляете интеграцию с ВК в типовую конфигурацию или реализовать свой
	// механизм сохранения настроек подключения к сайту ВКонтакте.
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.ЗаписатьДанныеВБезопасноеХранилище("ИнтеграцияВК", ПараметрыДоступа, "ПараметрыДоступа");
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры 

&НаКлиенте
Процедура НачатьДобавлениеТовара()
	Перем ИнформацияОбОшибке;
	
	ПараметрыИзображения = vk_ИнтеграцияВККлиентСервер.ЗагрузитьФотографиюТовара(
		ПараметрыДоступа.КлючДоступа,
		Число(ИдентификаторВладельца),
		ПолучитьИзВременногоХранилища(ИзображениеТовара), , , , ,
		ИнформацияОбОшибке);
	
	Если ИнформацияОбОшибке <> Неопределено И ИнформацияОбОшибке.ТребуетсяCaptcha Тогда
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьФотографиюТовараПослеВводаCaptcha", ЭтотОбъект);
		vk_ИнтеграцияВККлиент.ВвестиCaptchaИПовторитьВызовМетодаAPI(ИнформацияОбОшибке.ПараметрыCaptcha, Оповещение);
	Иначе
		ОбработатьЗагрузкуФотографииТовара(ПараметрыИзображения, ИнформацияОбОшибке);
	КонецЕсли; 
		
КонецПроцедуры 
	
&НаКлиенте
Процедура ЗагрузитьФотографиюТовараПослеВводаCaptcha(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не введена Captcha.'"));
	Иначе
		ОбработатьЗагрузкуФотографииТовара(Результат.Ответ, Результат.ИнформацияОбОшибке);
	КонецЕсли; 
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьЗагрузкуФотографииТовара(ПараметрыИзображения, ИнформацияОбОшибке = Неопределено)
	
	Если ИнформацияОбОшибке <> Неопределено Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru='Произошла ошибка при загрузке изображения товара: %1'"),
			ИнформацияОбОшибке.Представление);
		Сообщить(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	owner_id = -Число(ИдентификаторВладельца);
	
	ПараметрыМетода = Новый Структура;
	ПараметрыМетода.Вставить("owner_id", owner_id);
	ПараметрыМетода.Вставить("name", НаименованиеТовара);
	ПараметрыМетода.Вставить("description", ОписаниеТовара);
	ПараметрыМетода.Вставить("category_id", ИдентификаторКатегории);
	ПараметрыМетода.Вставить("main_photo_id", ПараметрыИзображения[0].id);
	
	Если Цена > 0 Тогда
		ПараметрыМетода.Вставить("price", Цена);
		Если ИспользоватьСтаруюЦену Тогда
			ПараметрыМетода.Вставить("old_price", СтараяЦена);
		КонецЕсли;
	КонецЕсли;

	Результат = vk_ИнтеграцияВККлиентСервер.ВызватьМетодAPI("market.add", ПараметрыМетода,
		ПараметрыДоступа.КлючДоступа, ИнформацияОбОшибке);
	
	Если ИнформацияОбОшибке <> Неопределено И ИнформацияОбОшибке.ТребуетсяCaptcha Тогда
		Оповещение = Новый ОписаниеОповещения("ДобавитьТоварПослеВводаCaptcha", ЭтотОбъект);
		vk_ИнтеграцияВККлиент.ВвестиCaptchaИПовторитьВызовМетодаAPI(ИнформацияОбОшибке.ПараметрыCaptcha, Оповещение);
	Иначе
		ОбработатьДобавлениеТовара(Результат, ИнформацияОбОшибке);
	КонецЕсли; 
	
КонецПроцедуры 

&НаКлиенте
Процедура ДобавитьТоварПослеВводаCaptcha(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru='Не введена Captcha.'"));
	Иначе
		ОбработатьДобавлениеТовара(Результат.Ответ, Результат.ИнформацияОбОшибке);
	КонецЕсли; 
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбработатьДобавлениеТовара(Результат, ИнформацияОбОшибке = Неопределено)
	
	Если ИнформацияОбОшибке <> Неопределено Тогда
		ТекстСообщения = СтрШаблон(НСтр("ru='Произошла ошибка при добавлении товара: %1'"),
			ИнформацияОбОшибке.Представление);
		Сообщить(ТекстСообщения);
	Иначе
		Сообщить(СтрШаблон(НСтр("ru='Товар успешно добавлен. ID товара = %1'"), Результат.market_item_id));	
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти
